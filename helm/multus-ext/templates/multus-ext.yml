---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: {{ .Values.crd.plural }}.k8s.cni.cncf.io
spec:
  group: k8s.cni.cncf.io
  version: v1
  scope: Namespaced
  names:
    plural: {{ .Values.crd.plural }}
    singular: {{ .Values.crd.singular }}
    kind: {{ .Values.crd.kind }}
    shortNames:
    - {{ .Values.crd.short }}
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            config:
                 type: string
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: multus
rules:
  - apiGroups: ["k8s.cni.cncf.io"]
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - '*'
    verbs:
      - '*'
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: multus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: multus
subjects:
- kind: ServiceAccount
  name: multus
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multus
  namespace: kube-system
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: multus-cni-config
  namespace: kube-system
  labels:
    tier: node
    app: multus
data:
  # NOTE: If you'd prefer to manually apply a configuration file, you may create one here.
  # In the case you'd like to customize the Multus installation, you should change the arguments to the Multus pod
  # change the "args" line below from
  # - "--multus-conf-file=auto"
  # to:
  # "--multus-conf-file=/tmp/multus-conf/70-multus.conf"
  # Additionally -- you should ensure that the name "70-multus.conf" is the alphabetically first name in the
  # /etc/cni/net.d/ directory on each node, otherwise, it will not be used by the Kubelet.
  cni-conf.json: |
    {
      "name": "multus-cni-network",
      "type": "multus",
      "capabilities": {
        "portMappings": true
      },
      "delegates": [
        {
          "cniVersion": "0.3.1",
          "name": "default-cni-network",
          "plugins": [
            {
              "type": "flannel",
              "name": "flannel.1",
                "delegate": {
                  "isDefaultGateway": true,
                  "hairpinMode": true
                }
              },
              {
                "type": "portmap",
                "capabilities": {
                  "portMappings": true
                }
              }
          ]
        }
      ],
      "kubeconfig": "/etc/cni/net.d/multus.d/multus.kubeconfig"
    }
  etcd-conf.json: |
    {
      "name": "{{ .Release.Name }}-etcdcni",
      "endpoints": {{ .Values.etcdcni.endpoints}},
      "auth": {
        "client": {
          "secureTransport": {{ .Values.etcdcni.auth.client.secureTransport }},
          "enableAuthentication": {{ .Values.etcdcni.auth.client.enableAuthentication }},
          "secretDirectory": "{{ .Values.etcdcni.auth.client.secretDirectory }}"
        },
        "peer": {
          "secureTransport": {{ .Values.etcdcni.auth.peer.secureTransport }},
          "enableAuthentication": {{ .Values.etcdcni.auth.peer.enableAuthentication }},
          "useAutoTLS": {{ .Values.etcdcni.auth.peer.useAutoTLS }}
        }
      }
    }
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{ template "multus-ext.fullname" . }}
  namespace: {{ .Values.daemonset.namespace }}
  labels:
    tier: node
    app: multus
spec:
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        tier: node
        app: multus
    spec:
      hostNetwork: true
      nodeSelector:
        beta.kubernetes.io/arch: amd64
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: multus
      containers:
      - name: kube-multus
        image: {{ .Values.daemonset.image }}
        imagePullPolicy: {{ .Values.daemonset.pullPolicy }}
        command: ["/entrypoint.sh"]
        args:
        - "--multus-conf-file=auto"
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "100m"
            memory: "50Mi"
        securityContext:
          privileged: true
        volumeMounts:
        - name: cni
          mountPath: /host/etc/cni/net.d
        - name: cnibin
          mountPath: /host/opt/cni/bin
        - name: multus-cfg
          mountPath: /tmp/multus-conf
        - name: etcd-cfg
          mountPath: /tmp/etcd-conf
        {{- if or .Values.etcdcni.auth.client.enableAuthentication (and .Values.etcdcni.auth.client.secureTransport ) }}
        - name: etcd-client-certs
          mountPath: /tmp/etcd/certs/client/
          readOnly: true
        {{- end }}    
      {{- if or .Values.daemonset.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.daemonset.registrySecret }} 
      {{- end }}
      volumes:
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: cnibin
          hostPath:
            path: /opt/cni/bin
        - name: multus-cfg
          configMap:
            name: multus-cni-config
            items:
            - key: cni-conf.json
              path: 70-multus.conf
        - name: etcd-cfg
          configMap:
            name: multus-cni-config
            items:
            - key: etcd-conf.json
              path: etcd.conf
        {{- if or .Values.etcdcni.auth.client.enableAuthentication (and .Values.etcdcni.auth.client.secureTransport ) }}
        - name: etcd-client-certs
          secret:
            secretName: {{ required "A secret containinig the client certificates is required" .Values.etcdcni.auth.client.existingSecret }}
            defaultMode: 256
        {{- end }}      
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "multus-ext.fullname" . }}-controller
  namespace: {{ .Values.controller.namespace }}
  labels:
    app: multus-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: multus-controller
  template:
    metadata:
      labels:
        app: multus-controller
    spec:
      # hostNetwork: true
      nodeSelector:
        beta.kubernetes.io/arch: amd64
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: multus
      containers:
      - name: {{ .Values.controller.name }}
        image: {{ .Values.controller.image }}
        imagePullPolicy: {{ .Values.controller.pullPolicy }}
        securityContext:
          privileged: true
        volumeMounts:
        - name: cni
          mountPath: /host/etc/cni/net.d
        - name: log
          mountPath: /host/var/log   
      {{- if or .Values.daemonset.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.daemonset.registrySecret }} 
      {{- end }}
      volumes:
        - name: cni
          hostPath:
            path: /etc/cni/net.d  
        - name: log
          hostPath:
            path: /var/log


